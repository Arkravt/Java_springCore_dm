1. @Component(<имя класса>) - если присутствует эта аннотация у класса это говорит о том, что этот класс будет использоваться в качестве бина.
Spring будет сканировать директорию которая указана в context.xml и искать там классы помеченные этой аннотацией для того,
чтобы создать бины.
В <имя класса> можно подставить имя, чтобы Spring искал класс c аннотацией @Component именно по этому имени.

2. @Autowired - эта та аннотация, которая используется для того, чтобы мы могли указать Spring, что он должен что-то внедрять.
А именно внедрять зависимость в то поле/метод/конструктор над которым он стоит.
Эта зависимость должна быть классом с аннотацией @Component, чтобы Spring мог создать бин для этой зависимости.
В последних версиях Spring над конструкторами не обязательно ставить эту аннотацию, спринг это делает автоматически,
соответственно те классы которые есть в конструкторе должны быть с аннотацией @Component.

3. @Value - используется на уровне параметра поля или метода/конструктора и указывает значение по умолчанию для затронутого аргумента.
Очень важно отметить, что аргумент, переданный аннотации @Value, может быть только String.
Spring преобразует значение в указанный тип, и присвоение будет выполнено без проблем, даже если мы передаем переменным String значение int или boolean.
Внедрение значений из файлов свойств с помощью аннотации @Value, вероятно, наиболее часто используется в реальных приложениях.
Мы будем использовать файл свойств по умолчанию для Spring Boot - application.properties, где мы можем определить переменные, к которым мы сможем обращаться позже:
пример: @Value("${car.brand:<значение по умолчанию>")
        private String brand;

4. @PropertySource(<путь к application.properties>) - применяется для класса.
Эта аннотация применяется для того, чтобы указать путь к файлу с параметрами не в файле context.xml, а прям над классом, с помощью аннотации.
Для того, что-бы считать параметры из файла нужно: в фигурных скобках указать имя параметра,
а через двоеточие указать значение по умолчанию если параметр в файле будет не найден.
@Value("${car.brand:<значение по умолчанию>")
private String brand;